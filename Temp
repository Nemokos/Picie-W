#include <WiFi.h>

#define THERMISTORPIN0 26 
// resistance at 25 degrees C
#define THERMISTORNOMINAL 100000
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 10
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10500

int samples[NUMSAMPLES];
unsigned long previousMillis = 0;
float temperature = 0; 
// SSID i hasło sieci Wi-Fi
const char* ssid = "T-Mobile-B 2.4GHz";
const char* password = "ares1123";
WiFiServer server(80);
void setup(void)
{
Serial.begin(115200);
WiFi.mode(WIFI_STA);
  // Połączenie z siecią Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  // Connection established
  Serial.println("");
  Serial.print("Pico W is connected to WiFi network ");
  Serial.println(WiFi.SSID());
 
  // Print IP Address
  Serial.print("Assigned IP Address: ");
  Serial.println(WiFi.localIP());
  // Start serwera HTTP
server.begin();
}

void loop(void)
{
 uint8_t i;
 float average;
 unsigned long currentMillis = millis();
 //analogReadResolution(12);

   

  // Wysłanie temperatury na serwer HTTP
 WiFiClient client = server.available();
  if (client) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
     // take N samples in a row, with a slight delay
    for (i = 0; i < NUMSAMPLES; i++) {
      samples[i] = analogRead(THERMISTORPIN0);
      delay(100);
    }

    // average all the samples out
    average = 0;
    for (i = 0; i < NUMSAMPLES; i++) {
      average += samples[i];
    }
    average /= NUMSAMPLES;
Serial.println (average);
    // convert the value to resistance
    average = 1023 / average - 1;
    average = SERIESRESISTOR / average;
    //verage = average * 2.00;
    //average = average / 3.00;
Serial.println (average);
    float steinhart;
    steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
    steinhart = log(steinhart);                  // ln(R/Ro)
    steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
    steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
    steinhart = 1.0 / steinhart;                 // Invert
    steinhart -= 273.15;                         // convert absolute temp to C
    Serial.println( currentMillis / 60000);
    Serial.print("Temperature A0 ");
    Serial.print(steinhart);
    Serial.println(" *C ");
    temperature = steinhart;
    delay(10);
  // Wyświetlenie temperatury w konsoli
  //Serial.print("Temperatura wynosi: ");
  //Serial.print(temperature);
  //Serial.println(" stopni Celsjusza");
    client.println("");
    client.print("<html><body><h1>Temperatura wynosi: ");
    client.print(temperature);
    client.print(" stopni Celsjusza</h1></body></html>");
    delay(3000);
    client.stop();
  }
}
